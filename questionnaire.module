<?php

/**
 * Implements hook_menu().
 */
function questionnaire_menu() {
  $items = array();

  $items['quiz/%node'] = array(
    'title' => t('Test Info'),
    'type' => MENU_CALLBACK,
    'page callback' => 'display_quiz_info',
    'page arguments' => array(1),
    'access arguments' => array('access content')
  );

  $items['quiz/take/%node'] = array(
    'title arguments' => array(2),
    'title callback' => 'set_test_page_title',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('questionnaire_test_form', 2),
    'access arguments' => array('access content'),
    'file' => 'questionnaire_test_form.inc'
  );

  return $items;
}

/**
 * Implements hook_node_info()
 */
function questionnaire_node_info() {
  return array(
    'questionnaire' => array(
      'name' => t('Questionnaire'),
      'base' => 'node_content',
      'description' => t('Create assessment and set questions using this type'),
      'has_title' => TRUE,
      'title_label' => t('Assessment title')
    )
  );
}

/**
 * Implement hook_form()
 */
function questionnaire_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function display_quiz_info($node) {
  return theme('quiz_info', array(
    'title' => $node->title,
    'no_of_questions' => count($node->field_questionnaire_questions[LANGUAGE_NONE]),
    'test_nid' => $node->nid
  ));
}

function set_test_page_title($node) {
  return t('Questionnaire test - @testTitle', array('@testTitle' => $node->title));
}


/**
 * Implements hook_theme().
 */
function questionnaire_theme($existing, $type, $theme, $path) {
  return array(
    'quiz_info' => array(
      'variables' => array(
        'title' => NULL,
        'no_of_questions' => 0,
        'test_nid' => NULL
      ),
      'template' => 'quiz_info',
      'path' => sprintf('%s/templates', $path)
    )
  );
}

/**
 * Implements hook_node_grants().
 */
function questionnaire_node_grants($account, $op) {
  $grants = array();
  if ($account->uid) {
    if ($op == 'view') {
      $grants['node_access_questionnaire_supervisor'] = array($account->uid);
    }

    if ($op == 'view' && (count(array_intersect($account->roles, array('supervisor', 'owner'))) <= 0)) {
      $grants['node_access_questionnaire_authenticated'] = array(2);
    }

    if($op == 'view' || $op == 'update') {
      $grants['node_access_questionnaire_author'] = array($account->uid);
    }

  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function questionnaire_node_access_records($node) {
  $grants = array();
  if ($node->type == 'questionnaire') {

    $supervisors = $node->field_questionnaire_supervisors[LANGUAGE_NONE];
    foreach ($supervisors as $value) {
      $grants[] = array(
        'realm' => 'node_access_questionnaire_supervisor',
        'gid' => $value['target_id'],
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0
      );
    }

    $grants[] = array(
      'realm' => 'node_access_questionnaire_authenticated',
      'gid' => 2,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0
    );

    $grants[] = array(
      'realm' => 'node_access_questionnaire_author',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0
    );
  }

  return $grants;
}

/**
 * Implements hook_views_api().
 */
function questionnaire_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_node_view_alter().
 */
function questionnaire_node_view_alter(&$build) {
  global $user;
  if ($build['#view_mode'] == 'full' && ($build['#node']->type == "questionnaire")) {
    if (count(array_intersect($user->roles, array('supervisor', 'owner', 'administrator'))) <= 0) {
      drupal_goto('/quiz/' . $build['#node']->nid);
    }
  }
}
